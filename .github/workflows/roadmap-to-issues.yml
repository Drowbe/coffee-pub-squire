name: ROADMAP to ISSUES (Auto or Manual)

on:
  # push:
  #   paths:
  #     - 'ROADMAP.md'
  #   branches:
  #     - master
  workflow_dispatch:  # Allow manual trigger only

permissions:
  contents: read
  issues: write
  repository-projects: write

jobs:
  sync-to-issues:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Create Labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            // Rate limiting helper functions
            const rateLimiter = {
              requestsThisMinute: 0,
              requestsThisHour: 0,
              lastMinuteReset: Date.now(),
              lastHourReset: Date.now(),
              
              async checkRateLimits() {
                const now = Date.now();
                
                // Reset minute counter if needed
                if (now - this.lastMinuteReset >= 60000) {
                  this.requestsThisMinute = 0;
                  this.lastMinuteReset = now;
                }
                
                // Reset hour counter if needed
                if (now - this.lastHourReset >= 3600000) {
                  this.requestsThisHour = 0;
                  this.lastHourReset = now;
                }
                
                if (this.requestsThisMinute >= 70) {
                  console.log('Approaching minute limit, waiting for reset...');
                  await new Promise(resolve => setTimeout(resolve, 60000));
                  this.requestsThisMinute = 0;
                  this.lastMinuteReset = Date.now();
                }
                
                if (this.requestsThisHour >= 450) {
                  console.log('Approaching hour limit, waiting for reset...');
                  await new Promise(resolve => setTimeout(resolve, 300000));
                }
              },
              
              async trackRequest() {
                await this.checkRateLimits();
                this.requestsThisMinute++;
                this.requestsThisHour++;
                await new Promise(resolve => setTimeout(resolve, 2000));
              },
              
              async handleRateLimit(error, retryCount = 0) {
                if (retryCount >= 3) {
                  throw new Error('Max retries exceeded');
                }
                
                const waitTime = Math.pow(2, retryCount) * 30000;
                console.log(`Rate limited. Waiting ${waitTime/1000} seconds before retry ${retryCount + 1}/3`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
                return retryCount + 1;
              }
            };

            const labels = [
              { name: 'squire', color: '1d76db', description: 'Coffee Pub Squire Module' },
              { name: 'bug', color: 'd73a4a', description: 'Something isn\'t working' },
              { name: 'enhancement', color: 'a2eeef', description: 'New feature or request' },
              { name: 'documentation', color: '0075ca', description: 'Documentation improvements' },
              { name: 'ui', color: 'bfdadc', description: 'User interface improvements' },
              { name: 'performance', color: '0e8a16', description: 'Performance improvements' },
              { name: 'compatibility', color: '1d76db', description: 'Compatibility with systems and modules' },
              { name: 'feature', color: '0052cc', description: 'Core feature implementation' },
              { name: 'maintenance', color: 'c5def5', description: 'Maintenance and updates' },
              { name: 'accessibility', color: 'c2e0c6', description: 'Accessibility improvements' }
            ];
            
            for (const label of labels) {
              try {
                await rateLimiter.trackRequest();
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
                console.log(`Created label: ${label.name}`);
              } catch (error) {
                if (error.status === 422) {
                  try {
                    await rateLimiter.trackRequest();
                    await github.rest.issues.updateLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: label.name,
                      color: label.color,
                      description: label.description
                    });
                    console.log(`Updated label: ${label.name}`);
                  } catch (updateError) {
                    console.log(`Error updating label ${label.name}:`, updateError);
                  }
                } else {
                  console.log(`Error creating label ${label.name}:`, error);
                }
              }
            }

      - name: Update Issues from ROADMAP.md
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Rate limiting helper functions
            const rateLimiter = {
              requestsThisMinute: 0,
              requestsThisHour: 0,
              lastMinuteReset: Date.now(),
              lastHourReset: Date.now(),
              
              async checkRateLimits() {
                const now = Date.now();
                
                if (now - this.lastMinuteReset >= 60000) {
                  this.requestsThisMinute = 0;
                  this.lastMinuteReset = now;
                }
                
                if (now - this.lastHourReset >= 3600000) {
                  this.requestsThisHour = 0;
                  this.lastHourReset = now;
                }
                
                if (this.requestsThisMinute >= 70) {
                  console.log('Approaching minute limit, waiting for reset...');
                  await new Promise(resolve => setTimeout(resolve, 60000));
                  this.requestsThisMinute = 0;
                  this.lastMinuteReset = Date.now();
                }
                
                if (this.requestsThisHour >= 450) {
                  console.log('Approaching hour limit, waiting for reset...');
                  await new Promise(resolve => setTimeout(resolve, 300000));
                }
              },
              
              async trackRequest() {
                await this.checkRateLimits();
                this.requestsThisMinute++;
                this.requestsThisHour++;
                await new Promise(resolve => setTimeout(resolve, 2000));
              },
              
              async handleRateLimit(error, retryCount = 0) {
                if (retryCount >= 3) {
                  throw new Error('Max retries exceeded');
                }
                
                const waitTime = Math.pow(2, retryCount) * 30000;
                console.log(`Rate limited. Waiting ${waitTime/1000} seconds before retry ${retryCount + 1}/3`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
                return retryCount + 1;
              }
            };
            
            // Add retry wrapper function
            async function withRetry(operation, maxRetries = 3) {
              let retryCount = 0;
              while (true) {
                try {
                  await rateLimiter.trackRequest();
                  return await operation();
                } catch (error) {
                  if (error.status === 403 && error.message?.includes('secondary rate limit')) {
                    retryCount = await rateLimiter.handleRateLimit(error, retryCount);
                    continue;
                  }
                  throw error;
                }
              }
            }
            
            try {
              // Get project data first
              const projectQuery = `
                query($owner: String!) {
                  user(login: $owner) {
                    projectV2(number: 1) {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectResult = await withRetry(async () => {
                return github.graphql(projectQuery, {
                  owner: context.repo.owner
                });
              });
              
              // Define project mutations
              const addToProjectMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              const issueQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $number) {
                      id
                    }
                  }
                }
              `;
              
              // Get project fields
              const project = projectResult.user.projectV2;
              const statusField = project.fields.nodes.find(field => field.name === 'Status');
              const priorityField = project.fields.nodes.find(field => field.name === 'Priority');
              
              // Read and parse ROADMAP.md
              const content = fs.readFileSync('ROADMAP.md', 'utf8');
              const sections = {};
              let currentSection = null;
              
              // Parse the markdown content
              for (const line of content.split('\n')) {
                if (line.startsWith('## ')) {
                  currentSection = line.substring(3).trim();
                  sections[currentSection] = [];
                } else if (line.startsWith('- ') && currentSection) {
                  let title = line.substring(2);
                  let priority = 'P0';
                  let labels = ['squire'];
                  
                  const priorityMatch = title.match(/\[Priority: (P\d+)\]/);
                  if (priorityMatch) {
                    priority = priorityMatch[1];
                    title = title.replace(/\[Priority: P\d+\]/, '').trim();
                  }
                  
                  const labelMatch = title.match(/\[Label: ([^\]]+)\]/);
                  if (labelMatch) {
                    const customLabels = labelMatch[1].split(',').map(l => l.trim());
                    labels = [...customLabels];
                    title = title.replace(/\[Label: [^\]]+\]/, '').trim();
                  }
                  
                  sections[currentSection].push({
                    title,
                    priority,
                    labels,
                    state: currentSection === 'CLOSED' ? 'closed' : 'open',
                    status: currentSection
                  });
                }
              }
              
              // Get existing issues
              const existingIssues = await withRetry(async () => {
                const { data } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all'
                });
                return data;
              });
              
              // Process each section
              for (const [sectionName, items] of Object.entries(sections)) {
                console.log(`Processing section: ${sectionName}`);
                for (const item of items) {
                  const existingIssue = existingIssues.find(issue => 
                    issue.title === item.title
                  );
                  
                  if (existingIssue) {
                    await withRetry(async () => {
                      await github.rest.issues.update({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: existingIssue.number,
                        state: item.state,
                        labels: item.labels
                      });
                      console.log(`Updated issue: ${item.title}`);
                    });
                    
                    // Add to project for existing issue
                    const issueResult = await withRetry(async () => {
                      return github.graphql(issueQuery, {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        number: existingIssue.number
                      });
                    });
                    
                    const projectResult = await withRetry(async () => {
                      return github.graphql(addToProjectMutation, {
                        projectId: project.id,
                        contentId: issueResult.repository.issue.id
                      });
                    });
                    
                    const itemId = projectResult.addProjectV2ItemById.item.id;
                    
                    // Set status
                    const statusOption = statusField.options.find(opt => opt.name === item.status);
                    if (statusOption) {
                      await withRetry(async () => {
                        return github.graphql(`
                          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                            updateProjectV2ItemFieldValue(
                              input: {
                                projectId: $projectId
                                itemId: $itemId
                                fieldId: $fieldId
                                value: { 
                                  singleSelectOptionId: $optionId
                                }
                              }
                            ) {
                              projectV2Item {
                                id
                              }
                            }
                          }
                        `, {
                          projectId: project.id,
                          itemId: itemId,
                          fieldId: statusField.id,
                          optionId: statusOption.id
                        });
                      });
                    }
                    
                    // Set priority
                    const priorityOption = priorityField.options.find(opt => opt.name === item.priority);
                    if (priorityOption) {
                      await withRetry(async () => {
                        return github.graphql(`
                          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                            updateProjectV2ItemFieldValue(
                              input: {
                                projectId: $projectId
                                itemId: $itemId
                                fieldId: $fieldId
                                value: { 
                                  singleSelectOptionId: $optionId
                                }
                              }
                            ) {
                              projectV2Item {
                                id
                              }
                            }
                          }
                        `, {
                          projectId: project.id,
                          itemId: itemId,
                          fieldId: priorityField.id,
                          optionId: priorityOption.id
                        });
                      });
                    }
                  } else {
                    const newIssue = await withRetry(async () => {
                      const { data: issue } = await github.rest.issues.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: item.title,
                        body: `Priority: ${item.priority}\nCreated from ROADMAP.md`,
                        labels: item.labels,
                        state: item.state
                      });
                      console.log(`Created new issue: ${item.title}`);
                      return issue;
                    });
                    
                    // Add to project for new issue
                    const issueResult = await withRetry(async () => {
                      return github.graphql(issueQuery, {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        number: newIssue.number
                      });
                    });
                    
                    const projectResult = await withRetry(async () => {
                      return github.graphql(addToProjectMutation, {
                        projectId: project.id,
                        contentId: issueResult.repository.issue.id
                      });
                    });
                    
                    const itemId = projectResult.addProjectV2ItemById.item.id;
                    
                    // Set status
                    const statusOption = statusField.options.find(opt => opt.name === item.status);
                    if (statusOption) {
                      await withRetry(async () => {
                        return github.graphql(`
                          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                            updateProjectV2ItemFieldValue(
                              input: {
                                projectId: $projectId
                                itemId: $itemId
                                fieldId: $fieldId
                                value: { 
                                  singleSelectOptionId: $optionId
                                }
                              }
                            ) {
                              projectV2Item {
                                id
                              }
                            }
                          }
                        `, {
                          projectId: project.id,
                          itemId: itemId,
                          fieldId: statusField.id,
                          optionId: statusOption.id
                        });
                      });
                    }
                    
                    // Set priority
                    const priorityOption = priorityField.options.find(opt => opt.name === item.priority);
                    if (priorityOption) {
                      await withRetry(async () => {
                        return github.graphql(`
                          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                            updateProjectV2ItemFieldValue(
                              input: {
                                projectId: $projectId
                                itemId: $itemId
                                fieldId: $fieldId
                                value: { 
                                  singleSelectOptionId: $optionId
                                }
                              }
                            ) {
                              projectV2Item {
                                id
                              }
                            }
                          }
                        `, {
                          projectId: project.id,
                          itemId: itemId,
                          fieldId: priorityField.id,
                          optionId: priorityOption.id
                        });
                      });
                    }
                  }
                }
                
                console.log(`Completed section ${sectionName}. Waiting before next section...`);
                await new Promise(resolve => setTimeout(resolve, 10000));
              }
              
              console.log('Successfully synced ROADMAP.md to issues');
              
            } catch (error) {
              console.error('Error syncing ROADMAP.md to issues:', error);
              console.error('Full error:', JSON.stringify(error, null, 2));
              process.exit(1);
            } 
              